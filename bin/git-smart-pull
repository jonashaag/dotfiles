#!/bin/bash

set -euo pipefail

function log {
  echo >&2 "$@"
}

set +e
if [ "$(tput colors 2>/dev/null)" -ge 8 ]; then
  function log {
    printf >&2 "\033[90m"
    echo   >&2 "$@"
    printf >&2 "\033[0m"
  }
fi
set -e

log "[smart-pull] Attempting fast-forward pull"
set +e
git pull --ff-only "$@" 2>/dev/null
res=$?
set -e

if [ $res -eq 0 ]; then
  log "[smart-pull] Fast-forward pull succeeded."
  exit 0
elif [ $res -ne 128 ]; then
  log "[smart-pull] git pull exited with unexpected status $res"
  exit 3
fi

log "[smart-pull] Fast-forward pull failed."
log ["smart-pull] Checking if we can rebase without conflict."
if ! git diff --quiet --ignore-submodules || ! git diff --staged --quiet; then
  log "[smart-pull] Dirty working tree or index. Aborting."
  exit 2
fi
upstream_branch="$(git rev-parse --abbrev-ref --symbolic-full-name @{u})"
git branch -D _git-smart-pull --quiet 2>/dev/null || true
git checkout -b _git-smart-pull --quiet
git branch --set-upstream-to "$upstream_branch" --quiet
set +e
git pull --rebase=true >/dev/null 2>/dev/null
rebase_ok=$?
set -e
git branch -D _git-smart-pull --quiet 2>/dev/null || true
if [ $rebase_ok -eq 0 ]; then
  log "[smart-pull] Can rebase without conflict."
  log "[smart-pull] Will pull with rebase."
  git checkout -
  git pull --rebase=true
else
  log "[smart-pull] Cannot rebase without conflict. Conflicted files:"
  (
    IFS=$'\n'
    for f in $(git diff --name-only --diff-filter=U --relative); do
      log "[smart-pull] $f"
    done
  )
  git rebase --abort
  git checkout - --quiet
  while true; do
    read -r -p "Select pull method: [m]erge / [r]ebase / [n]one " res
    case $res in 
      m)
        exec git pull --rebase=no
        break
        ;;
      r)
        exec git pull --rebase=yes
        break
        ;;
      [n])
        exit 1
        ;;
      *)
        ;;
    esac
  done
fi
